import React from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Nav from './components/Nav/Nav'
import Callout from './components/Callout/Callout';
import Profile from './components/Profile/Profile';
import Contact from './components/Contact/Contact';
import Projects from './components/Projects/Projects';
import Footer from './components/Footer/Footer';
import {groq} from 'next-sanity'

import {usePreviewSubscription} from '../lib/sanity'
import {getClient} from '../lib/sanity.server'
import WorkClients from './components/WorkClients/WorkClients'
import AboutMe from './components/AboutMe/AboutMe'


export default function Home({data,preview,image}) {
  const {data: previewData} = usePreviewSubscription(data?.query, {
    params: data?.queryParams ?? {},
    // The hook will return this on first render
    // This is why it's important to fetch *draft* content server-side!
    initialData: data?.page,
    // The passed-down preview context determines whether this function does anything
    enabled: preview,
  })
  console.log(image);
  return (
    <>
      <Nav/>
      <div className="leading-normal tracking-normal">
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Callout/>
        <AboutMe/>
        <Profile/>
        <Projects projects={data} image={image}/>
        <WorkClients/>
        <Contact/>
        <Footer/>
      </div>
    </>
  )
}
export async function getServerSideProps({params, preview = false}) {
  const query = groq`*[_type == 'project']`;
  const image = groq`*[_type == 'project']{image}`;
  const data = await getClient(preview).fetch(query)
  const dataImage = await getClient(preview).fetch(image);

  // Escape hatch, if our query failed to return data
  if (!data) return {notFound: true}

  // Helper function to reduce all returned documents down to just one

  return {
    props: {
      // Pass down the "preview mode" boolean to the client-side
      preview,
      // Pass down the initial content, and our query
      data: {data},
      image:dataImage
    }
  }
}
